/*
{
   "engine":{
      "es_version":"V0.1.12A",
      "name":"Porsche 908 v1, v2, v3 flat8 1968",
      "catalog_id":251,
      "yt_handle":"kW_GdQPK0HY",
      "enable_update":true,
      "description":[
         "Three versions of Porsche 908 flat8 engine. All based on real data.",
         "v1 1-8-2-6-4-5-3-7",
         "v2 1-5-2-7-4-8-3-6",
         "v3 1-7-2-8-5-3-6-4",
         "Note that v1 and v2 share the same crank layout, while v3 is different."
      ]
   }
}
*/

// Engine Sim V0.1.12A
// Porsche 908 v1, v2, v3
// porsche_908
// Created by oror 2022

import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label vee(180.0 * units.deg)
label bore(85.0)
label stroke(66.0)
label compression_ratio(10.3)
label con_rod(166.0) // ~
label compression_height(27.0 * units.mm) // ?
label intake_valve_diameter(52.7) // ~
label exhaust_valve_diameter(44.6) // ~
label intake_valves(1.0)
label exhaust_valves(1.0)

label cyl(8.0)
label row(2.0)
label cycle(2.0 * 360.0 * units.deg)
label rot180(180.0 * units.deg)
label rot360(360.0 * units.deg)
label rot(2.0 * (360.0 / cyl) * units.deg)

label ci(152.0)
label redline(9000.0)
label intake_cfm((ci * redline * 1.1) / 3456.0)
label exhaust_cfm((redline * 0.001) * ci / 2.0)

// Porsche 908 valve timings
label intake_valve_lift(10.0) // ?
label exhaust_valve_lift(10.0) // ?
label IVO(81.0 * units.deg) //BTDC
label IVC(71.0 * units.deg) //ABDC
label EVO(81.0 * units.deg) //BBDC
label EVC(51.0 * units.deg) //ATDC

label intake_duration(IVO + IVC + rot180)
label exhaust_duration(EVO + EVC + rot180)

label ILC((-IVO + rot180 + IVC) / 2.0 + rot360)
label ELC((rot180 - EVO + EVC + rot360) / 2.0)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
}

public node eng_lobe_profile_int {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: intake_duration,
            gamma: 7.0,
            lift: intake_valve_lift * units.mm,
            steps: 100
        );
}

public node eng_lobe_profile_exh {
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: exhaust_duration,
            gamma: 7.0,
            lift: exhaust_valve_lift * units.mm,
            steps: 100
        );
}

camshaft_parameters params(
    advance: 0.0 * units.deg,
    base_radius: 1.8 * units.cm
)

// v1 1-8-2-6-4-5-3-7
public node layout_0 {
    input wires;
    input timing_curve;
    input rev_limit;
    input limiter_duration;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    output rj0: _rj0;
    output rj1: _rj1;
    output rj2: _rj2;
    output rj3: _rj3;
    output rj4: _rj4;
    output rj5: _rj5;
    output rj6: _rj6;
    output rj7: _rj7;

    output ignition: _ign;
    output name: "Porsche 908 v1";

    ignition_module _ign(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
    _ign
        .connect_wire(wires.wire1, (0.0/cyl) * cycle)
        .connect_wire(wires.wire8, (1.0/cyl) * cycle)
        .connect_wire(wires.wire2, (2.0/cyl) * cycle)
        .connect_wire(wires.wire6, (3.0/cyl) * cycle)
        .connect_wire(wires.wire4, (4.0/cyl) * cycle)
        .connect_wire(wires.wire5, (5.0/cyl) * cycle)
        .connect_wire(wires.wire3, (6.0/cyl) * cycle)
        .connect_wire(wires.wire7, (7.0/cyl) * cycle)

    camshaft _intake_cam_0(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_0(params, lobe_profile: eng_lobe_profile_exh())
    
    camshaft _intake_cam_1(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_1(params, lobe_profile: eng_lobe_profile_exh())

    _intake_cam_0
        .add_lobe(ILC + 0 * rot)
        .add_lobe(ILC + 2 * rot)
        .add_lobe(ILC + 6 * rot)
        .add_lobe(ILC + 4 * rot)

    _exhaust_cam_0
        .add_lobe(ELC + 0 * rot)
        .add_lobe(ELC + 2 * rot)
        .add_lobe(ELC + 6 * rot)
        .add_lobe(ELC + 4 * rot)
        
    _intake_cam_1
        .add_lobe(ILC + 5 * rot)
        .add_lobe(ILC + 3 * rot)
        .add_lobe(ILC + 7 * rot)
        .add_lobe(ILC + 1 * rot)

    _exhaust_cam_1
        .add_lobe(ELC + 5 * rot)
        .add_lobe(ELC + 3 * rot)
        .add_lobe(ELC + 7 * rot)
        .add_lobe(ELC + 1 * rot)

    rod_journal _rj0(angle: (0.0 / cyl) * cycle + vee)
    rod_journal _rj2(angle: (2.0 / cyl) * cycle + vee)
    rod_journal _rj4(angle: (6.0 / cyl) * cycle + vee)
    rod_journal _rj6(angle: (4.0 / cyl) * cycle + vee)
    rod_journal _rj1(angle: (5.0 / cyl) * cycle)
    rod_journal _rj3(angle: (3.0 / cyl) * cycle)
    rod_journal _rj5(angle: (7.0 / cyl) * cycle)
    rod_journal _rj7(angle: (1.0 / cyl) * cycle)
}

// v2 1-5-2-7-4-8-3-6
public node layout_1 {
    input wires;
    input timing_curve;
    input rev_limit;
    input limiter_duration;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    output rj0: _rj0;
    output rj1: _rj1;
    output rj2: _rj2;
    output rj3: _rj3;
    output rj4: _rj4;
    output rj5: _rj5;
    output rj6: _rj6;
    output rj7: _rj7;

    output ignition: _ign;
    output name: "Porsche 908 v2";

    ignition_module _ign(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
    _ign
        .connect_wire(wires.wire1, (0.0/cyl) * cycle)
        .connect_wire(wires.wire5, (1.0/cyl) * cycle)
        .connect_wire(wires.wire2, (2.0/cyl) * cycle)
        .connect_wire(wires.wire7, (3.0/cyl) * cycle)
        .connect_wire(wires.wire4, (4.0/cyl) * cycle)
        .connect_wire(wires.wire8, (5.0/cyl) * cycle)
        .connect_wire(wires.wire3, (6.0/cyl) * cycle)
        .connect_wire(wires.wire6, (7.0/cyl) * cycle)

    camshaft_parameters params(
        advance: 0.0 * units.deg,
        base_radius: 1.8 * units.cm
    )

    camshaft _intake_cam_0(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_0(params, lobe_profile: eng_lobe_profile_exh())
    
    camshaft _intake_cam_1(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_1(params, lobe_profile: eng_lobe_profile_exh())

    _intake_cam_0
        .add_lobe(ILC + 0 * rot)
        .add_lobe(ILC + 2 * rot)
        .add_lobe(ILC + 6 * rot)
        .add_lobe(ILC + 4 * rot)

    _exhaust_cam_0
        .add_lobe(ELC + 0 * rot)
        .add_lobe(ELC + 2 * rot)
        .add_lobe(ELC + 6 * rot)
        .add_lobe(ELC + 4 * rot)
        
    _intake_cam_1
        .add_lobe(ILC + 1 * rot)
        .add_lobe(ILC + 7 * rot)
        .add_lobe(ILC + 3 * rot)
        .add_lobe(ILC + 5 * rot)

    _exhaust_cam_1
        .add_lobe(ELC + 1 * rot)
        .add_lobe(ELC + 7 * rot)
        .add_lobe(ELC + 3 * rot)
        .add_lobe(ELC + 5 * rot)

    rod_journal _rj0(angle: (0.0 / cyl) * cycle + vee)
    rod_journal _rj2(angle: (2.0 / cyl) * cycle + vee)
    rod_journal _rj4(angle: (6.0 / cyl) * cycle + vee)
    rod_journal _rj6(angle: (4.0 / cyl) * cycle + vee)
    rod_journal _rj1(angle: (5.0 / cyl) * cycle)
    rod_journal _rj3(angle: (3.0 / cyl) * cycle)
    rod_journal _rj5(angle: (7.0 / cyl) * cycle)
    rod_journal _rj7(angle: (1.0 / cyl) * cycle)
}

// v3 1-7-2-8-5-3-6-4
public node layout_2 {
    input wires;
    input timing_curve;
    input rev_limit;
    input limiter_duration;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    output rj0: _rj0;
    output rj1: _rj1;
    output rj2: _rj2;
    output rj3: _rj3;
    output rj4: _rj4;
    output rj5: _rj5;
    output rj6: _rj6;
    output rj7: _rj7;

    output ignition: _ign;
    output name: "Porsche 908 v3";

    ignition_module _ign(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
    _ign
        .connect_wire(wires.wire1, (0.0/cyl) * cycle)
        .connect_wire(wires.wire7, (1.0/cyl) * cycle)
        .connect_wire(wires.wire2, (2.0/cyl) * cycle)
        .connect_wire(wires.wire8, (3.0/cyl) * cycle)
        .connect_wire(wires.wire5, (4.0/cyl) * cycle)
        .connect_wire(wires.wire3, (5.0/cyl) * cycle)
        .connect_wire(wires.wire6, (6.0/cyl) * cycle)
        .connect_wire(wires.wire4, (7.0/cyl) * cycle)

    camshaft_parameters params(
        advance: 0.0 * units.deg,
        base_radius: 1.8 * units.cm
    )

    camshaft _intake_cam_0(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_0(params, lobe_profile: eng_lobe_profile_exh())
    
    camshaft _intake_cam_1(params, lobe_profile: eng_lobe_profile_int())
    camshaft _exhaust_cam_1(params, lobe_profile: eng_lobe_profile_exh())

    _intake_cam_0
        .add_lobe(ILC + 0 * rot)
        .add_lobe(ILC + 2 * rot)
        .add_lobe(ILC + 5 * rot)
        .add_lobe(ILC + 7 * rot)

    _exhaust_cam_0
        .add_lobe(ELC + 0 * rot)
        .add_lobe(ELC + 2 * rot)
        .add_lobe(ELC + 5 * rot)
        .add_lobe(ELC + 7 * rot)
        
    _intake_cam_1
        .add_lobe(ILC + 4 * rot)
        .add_lobe(ILC + 6 * rot)
        .add_lobe(ILC + 1 * rot)
        .add_lobe(ILC + 3 * rot)

    _exhaust_cam_1
        .add_lobe(ELC + 4 * rot)
        .add_lobe(ELC + 6 * rot)
        .add_lobe(ELC + 1 * rot)
        .add_lobe(ELC + 3 * rot)

    rod_journal _rj0(angle: (0.0 / cyl) * cycle + vee)
    rod_journal _rj2(angle: (2.0 / cyl) * cycle + vee)
    rod_journal _rj4(angle: (5.0 / cyl) * cycle + vee)
    rod_journal _rj6(angle: (7.0 / cyl) * cycle + vee)
    rod_journal _rj1(angle: (4.0 / cyl) * cycle)
    rod_journal _rj3(angle: (6.0 / cyl) * cycle)
    rod_journal _rj5(angle: (1.0 / cyl) * cycle)
    rod_journal _rj7(angle: (3.0 / cyl) * cycle)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node eng_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input flip_display: false;
    
    alias output __out: head;
    
    label bore_radius(bore / 2.0)

    // port_flow.py v0.2
    // intake H: 52.7 L: 10.0 N: 1.0
    // exhaust H: 44.6 L: 10.0 N: 1.0
    // intake port area: 1854.087 mm2; saturated lift: 11.427 mm
    // exhaust port area: 1327.940 mm2; saturated lift: 9.671 mm
    // cylinder volume: 374.517 cc; engine volume: 2996.137 cc
    // 8 harmonic intake runner length: 18.119 cm; diameter: 4.152 cm
    // primary length: 66.746 cm, area: 8.937 cm2, diameter: 3.373 cm
    // collector diameter: 4.771 cm, area: 17.874 cm2
    // target power: 8100 RPM, torque: 5346 RPM
    function intake_flow(1.000 * units.mm)
    intake_flow
        .add_flow_sample(0.0, 0.0)
        .add_flow_sample(1.000, 33.983)
        .add_flow_sample(2.000, 61.275)
        .add_flow_sample(3.000, 86.043)
        .add_flow_sample(4.000, 109.170)
        .add_flow_sample(5.000, 131.077)
        .add_flow_sample(6.000, 152.013)
        .add_flow_sample(7.000, 172.140)
        .add_flow_sample(8.000, 191.576)
        .add_flow_sample(9.000, 210.407)
        .add_flow_sample(10.000, 228.701)

    function exhaust_flow(1.000 * units.mm)
    exhaust_flow
        .add_flow_sample(0.0, 0.0)
        .add_flow_sample(1.000, 28.078)
        .add_flow_sample(2.000, 50.494)
        .add_flow_sample(3.000, 70.773)
        .add_flow_sample(4.000, 89.664)
        .add_flow_sample(5.000, 107.522)
        .add_flow_sample(6.000, 124.559)
        .add_flow_sample(7.000, 140.911)
        .add_flow_sample(8.000, 156.678)
        .add_flow_sample(9.000, 171.933)
        .add_flow_sample(10.000, 181.972)

    cylinder_head head(
        chamber_volume: (circle_area(bore_radius) * stroke / compression_ratio) / 1000.0 * units.cc,
        intake_runner_volume: 245.347 * units.cc,
        intake_runner_cross_section_area: 13.541 * units.cm2,
        exhaust_runner_volume: 81.782 * units.cc,
        exhaust_runner_cross_section_area: 8.937 * units.cm2,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node eng {
    alias output __out: engine;

    engine engine(
        name: engine_config.name,
        starter_torque: 100 * units.Nm,
        starter_speed: 500 * units.rpm,
        redline: redline * units.rpm,
        fuel: fuel( // 90% methanol?
            max_turbulence_effect: 3.0,
            burning_efficiency_randomness: 0.3,
            max_burning_efficiency: 0.96,
            molecular_mass: 312.5 * units.g,
            energy_density: 25.0 * units.kJ / units.g,
            density: 0.702 * units.kg / units.L,
            molecular_afr: 6.0
        ),
        throttle_gamma: 1.5,
        jitter: 1.5,
        noise: 1.0,
        simulation_frequency: 8000
    )

    wires wires()

    crankshaft c0(
        throw: (stroke / 2.0) * units.mm,
        flywheel_mass: 6.2 * units.kg,
        mass: 5 * units.kg,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.13,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 0.0
    )

    // ignition_timing.py v0.1 r=1.22
    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 5.0 * units.deg)
        .add_sample(1000 * units.rpm, 6.1 * units.deg)
        .add_sample(2000 * units.rpm, 7.4 * units.deg)
        .add_sample(3000 * units.rpm, 9.1 * units.deg)
        .add_sample(4000 * units.rpm, 11.1 * units.deg)
        .add_sample(5000 * units.rpm, 13.5 * units.deg)
        .add_sample(6000 * units.rpm, 16.5 * units.deg)
        .add_sample(7000 * units.rpm, 20.1 * units.deg)
        .add_sample(8000 * units.rpm, 24.5 * units.deg)
        .add_sample(9000 * units.rpm, 29.9 * units.deg)

    // change layouts here
    layout_2 engine_config(
        wires: wires,
        timing_curve: timing_curve,
        rev_limit: 9500 * units.rpm,
        limiter_duration: 0.003
    )
    
    c0
        .add_rod_journal(engine_config.rj0)
        .add_rod_journal(engine_config.rj1)
        .add_rod_journal(engine_config.rj2)
        .add_rod_journal(engine_config.rj3)
        .add_rod_journal(engine_config.rj4)
        .add_rod_journal(engine_config.rj5)
        .add_rod_journal(engine_config.rj6)
        .add_rod_journal(engine_config.rj7)

    piston_parameters piston_params(
        mass: 310 * units.g,
        blowby: k_28inH2O(0.01),
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 280.0 * units.g,
        moment_of_inertia: 0.0012,
        center_of_mass: 0.0,
        length: con_rod * units.mm
    )

    cylinder_bank_parameters bank_params(
        bore: bore * units.mm,
        deck_height: (con_rod + stroke / 2.0) * units.mm + compression_height
    )

    label intake_valve_circ(intake_valve_diameter * constants.pi)
    label intake_valve_area(intake_valve_circ * intake_valve_lift / 100.0) // cm2

    label intake_plenum_area(intake_valve_area * cyl * intake_valves) // cm2
    label exhaust_crossection_area(17.874) // cm2

    label exhaust_pipe_length_0(105.0) // cm
    label exhaust_volume_0(exhaust_crossection_area * exhaust_pipe_length_0 / 100.0) // Litres
    
    label exhaust_pipe_length_1(100.0) // cm
    label exhaust_volume_1(exhaust_crossection_area * exhaust_pipe_length_1 / 100.0) // Litres
    
    label spacing_factor(1.1)
    label flange_density(1.0)
    label primary_tube_length(66.746)

    intake intake(
        plenum_volume: 2.0 * units.L,
        plenum_cross_section_area: intake_plenum_area * units.cm2,
        intake_flow_rate: k_carb(intake_cfm),
        idle_flow_rate: k_carb(0.05),
        idle_throttle_plate_position: 0.9985,
        runner_flow_rate: k_carb(intake_cfm / (cyl / 2.0) * 1.33),
        runner_length: 18.119 * units.cm,
        velocity_decay: 0.05
    )
    
    exhaust_system_parameters es_params0(
        outlet_flow_rate: k_carb(exhaust_cfm / 2.0),
        collector_cross_section_area: exhaust_crossection_area * units.cm2,
        length: exhaust_pipe_length_0 * units.cm,
        primary_tube_length: primary_tube_length * units.cm,
        primary_flow_rate: k_carb(exhaust_cfm / (cyl / 2.0)),
        velocity_decay: 1.0,
        volume: exhaust_volume_0 * units.L
    )
    
    exhaust_system_parameters es_params1(
        outlet_flow_rate: k_carb(exhaust_cfm / 2.0),
        collector_cross_section_area: exhaust_crossection_area * units.cm2,
        length: exhaust_pipe_length_1 * units.cm,
        primary_tube_length: primary_tube_length * units.cm,
        primary_flow_rate: k_carb(exhaust_cfm / (cyl / 2.0)),
        velocity_decay: 1.0,
        volume: exhaust_volume_1 * units.L
    )

    
    // exhaust_system exhaust0(es_params0, audio_volume: 0.1, impulse_response: impulse_response(filename: "C:/list/111/assets/sound-library/smooth/smooth_14.wav"))
    // exhaust_system exhaust1(es_params1, audio_volume: 0.1, impulse_response: impulse_response(filename: "C:/list/111/assets/sound-library/smooth/smooth_14.wav"))
    exhaust_system exhaust0(es_params0, impulse_response: ir_lib.default_0)
    exhaust_system exhaust1(es_params1, impulse_response: ir_lib.default_0)
 
    cylinder_bank b0(bank_params, angle: vee / 2)
    cylinder_bank b1(bank_params, angle: vee / -2)
    
    label pl0 ((4.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl1 ((3.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl2 ((2.0 * bore * spacing_factor / flange_density) * units.mm)
    label pl3 ((1.0 * bore * spacing_factor / flange_density) * units.mm)

    b0
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj0,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj2,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl1,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj4,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl2,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj6,
            intake: intake,
            exhaust_system: exhaust0,
            primary_length: pl3,
            ignition_wire: wires.wire4
        )
        
    b1
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj1,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl0,
            ignition_wire: wires.wire5
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj3,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl1,
            ignition_wire: wires.wire6
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj5,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl2,
            ignition_wire: wires.wire7
        )
        .add_cylinder(
            piston: piston(piston_params),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: engine_config.rj7,
            intake: intake,
            exhaust_system: exhaust1,
            primary_length: pl3,
            ignition_wire: wires.wire8
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)
    
    engine.add_ignition_module(engine_config.ignition)

    b0.set_cylinder_head (
        eng_head(
            intake_camshaft: engine_config.intake_cam_0,
            exhaust_camshaft: engine_config.exhaust_cam_0
        )
    )
    
    b1.set_cylinder_head (
        eng_head(
            intake_camshaft: engine_config.intake_cam_1,
            exhaust_camshaft: engine_config.exhaust_cam_1
        )
    )
}

public node veh {
    alias output __out: vehicle;
    vehicle vehicle(
        mass: 650 * units.kg,
        drag_coefficient: 0.35,
        cross_sectional_area: (1720 * units.mm) * (930 * units.mm),
        diff_ratio: 4,
        tire_radius: (621.0 / 2) * units.mm,
        rolling_resistance: 20
        )
}

private node trn {
    alias output __out:
        transmission(
            max_clutch_torque: 500 * units.Nm,
            max_clutch_flex: 30 * units.deg,
            limit_clutch_flex: true,
            clutch_stiffness: 20 * units.Nm / units.deg,
            clutch_damping: 1.0,
            simulate_flex: true
        )
        .add_gear(2.66)
        .add_gear(1.78)
        .add_gear(1.30)
        .add_gear(1.00)
        .add_gear(0.74);
}

run(
    engine: eng(),
    transmission: trn(),
    vehicle: veh()
)